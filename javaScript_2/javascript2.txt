2_All DOM selector**********************************************************************

Inspect
Console
--------------------------

document.getElementById();
document.getElementById('title')
document.getElementById('title').id
document.getElementById('title').className
document.getElementById('title').getAttribute('id')
document.getElementById('title').getAttribute('class')
document.getElementById('title').setAttribute('class','text')

const title=document.getElementById('title')
title
op:-<h1 id="title" class="heading">DOM manipulation</h1>
title.style.color='green'

title.innerHTML
'DOM manipulation'
title.innerText
'DOM manipulation'
title.textContent
'DOM manipulation'


<h1 id="title" class="heading">DOM manipulation <span style="display: none;">JAVA SCRIPT</span></h1>

title.innerText
'DOM manipulation'

title.textContent
'DOM manipulation JAVA SCRIPT'

title.innerHTML
'DOM manipulation <span style="display: none;">JAVA SCRIPT</span>'

const c=document.querySelector('ul')
const mygreen=c.querySelector('li')
mygreen.style.color='green'
mygreen.innerText="five"



const a=document.querySelectorAll('li')

COLOR SILNG li TAG
a[0].style.color='red'

//COLOR ALL li TAG
a.forEach(function (l) {
    l.style.color='red'
})

//USING FAT-ARROW FUNCTION
a.forEach(l => {
    l.style.color = 'red';
});


3_How to create a new element***************************************************************
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body style="background-color: #212121; color: #fff;">
     <div class="parent">
        <div class="day">Sunday</div>
        <div class="day">Monday</div>
        <div class="day">Tuseday</div>
        <div class="day">Wednesday</div>
     </div>
</body>

<script>
    const parent=document.querySelector('.parent');
    // console.log(parent);
    // console.log(parent.children);
    // console.log(parent.children[1]);
    // console.log(parent.children[1].innerHTML);

    // for(let i=0;i<parent.children.length;i++){
    //     console.log(parent.children[i].innerHTML);
    // }

    parent.children[1].style.color="red";
    console.log(parent.firstElementChild);
    console.log(parent.lastElementChild);
</script>
</html>
   ######################################################################
   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CREATE ELEMENT USING JS</title>
</head>
<body style="background-color: #212121; color: #fff;">
    
</body>
<script>
    const div=document.createElement('div');
    console.log(div);
    div.className="main"
    div.id="mymain"
    div.setAttribute("title","generate-title");
    // div.innerHTML="Chai aur Code"
    div.style.backgroundColor="green";
    div.style.padding="12px";

    const addtext=document.createTextNode("Hello Guys , How Are you");
    div.appendChild(addtext);

    document.body.appendChild(div);
</script>
</html>

4_Edit and remove DOM elements**********************************************
   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit and remove DOM</title>
</head>
<body style="background-color: #212121; color: #fff;">

    <ul class="language">
        <li style="color: red;">javaScript</li>
    </ul>
    
</body>
<script>
//ADD################################### 

    //not optimized code
    // const addLanguage=(languageName)=>{
    //     const li=document.createElement('li');
    //     li.innerHTML=`${languageName}`;
    //     li.style.color="red";
    //     document.querySelector('.language').appendChild(li);
    // }
    // addLanguage("java");
    // addLanguage("HTML");

    // #########################################################################
          //optimized code
    const addLang=(langName)=>{
        const li=document.createElement('li');
        const addText=document.createTextNode(langName);
        li.appendChild(addText);
        document.querySelector('.language').appendChild(li);
    }
    addLang("java");
    addLang("HTML");
    addLang("CSS");
    addLang("TypeScript");

//EDIT#######################################

const secondEle=document.querySelector("li:nth-child(2)");
// console.log(secondEle);
// secondEle.innerHTML="Advance java" //it's not efficient way

const newLi=document.createElement('li');
// console.log(newLi);

newLi.textContent="Advance Java"
secondEle.replaceWith(newLi);

//REMOVE########################################

const lastLang=document.querySelector('li:last-child');
console.log(lastLang);
lastLang.remove();
</script>
</html>


5_Letâ€™s build 4 js projects**********************************************

 //PREJECT-1---Body Color Change---###########################
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Body Color Change</title>
    <style>
        .button{
            cursor: pointer;
        }
        #red {
            background-color: red;
            padding: 10px 10px;
            cursor: pointer;
        }

        #blue {
            background-color: blue;
            padding: 10px 10px;
        }

        #grey {
            background-color: grey;
            padding: 10px 10px;
        }

        #green {
            background-color: green;
            padding: 10px 10px;
        }
    </style>
</head>

<body>
    <h1>Color Swithch</h1>
    <span class="button" id="red">RED</span>
    <span class="button" id="blue">BLUE</span>
    <span class="button" id="grey">GREY</span>
    <span class="button" id="green">GREEN</span>

</body>

<script>
    const body = document.querySelector('body');
    const buttons = document.querySelectorAll('.button');

    buttons.forEach((button) => {
           console.log(button);
        button.addEventListener('click', (e) => {
            // console.log(e);
            // console.log(e.target);
          
            if(e.target.id==='red'){
                body.style.backgroundColor=e.target.id;
                // button.style.backgroundColor="#fff";
            }
            if(e.target.id==='blue'){
                body.style.backgroundColor=e.target.id;
                // button.style.backgroundColor="#fff";
            }
            if(e.target.id==='grey'){
                body.style.backgroundColor=e.target.id;
                // button.style.backgroundColor="#fff";
               
            }
            if(e.target.id==='green'){
                body.style.backgroundColor=e.target.id;
                // button.style.backgroundColor="#fff";
            }

        });
        
    });
</script>

</html>


 //PREJECT-2---Area of Rectangle---###########################
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Area of Rectangle</title>
</head>
<body>
    <h1>Area of Rectangle</h1>
    <form action="">
        <label for="">Length</label>
        <input type="text" placeholder="Enter the value of length" id="length"><br>
        <label for="">Width</label>
        <input type="text" placeholder="Enter the value of Width" id="width"><br>
        <button>calculate</button><br>
        <div id="result"></div>
    </form>
    
</body>
<script>
    const form=document.querySelector('form');
    form.addEventListener('submit',(e)=>{
        e.preventDefault();
        const len=parseInt(document.querySelector('#length').value);
        const wid=parseInt(document.querySelector('#width').value);
        const res=document.querySelector('#result');

        if(len === '' || len < 0 || isNaN(len)){
            res.innerHTML=`Plz enter vailed data ${len}`;

        }
        else if(wid === '' || wid < 0 || isNaN(wid)){
            res.innerHTML=`Plz enter vailed data ${wid}`;

        }else{
            const area=len*wid;
            res.innerHTML=`<span>Area of the rectangle is: ${area}</span>`;
        }
    });
</script>
</html>


//PREJECT-3---DIGITAL CLCOK---###########################

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DIGITAL CLCOK</title>
    <style>
        .main{
            width: 100%;
            height: 100vh;
            /* margin: auto auto; */
            display:flex ;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .heading{
            color: green;
            font-size: 50px;
            font-weight: 700;
        }
        #clock{
            background-color: yellow;
            padding: 1rem 5rem;
            font-size: 30px;
        }
    </style>
</head>
<body style="background-color: #212121;">
    <div class="main">
        <div class="heading"><span style="display: block;">Your Local Time</span></div>
        <div id="clock"></div>
    </div>
</body>
<script>
   const clock=document.getElementById('clock');

//    setInterval(()=>{
//     let date=new Date();
//     clock.innerHTML=date.toLocaleTimeString();

//    },1000);
</script>
</html>

6_Events in javascript**********************************************

  In javaScript EventListener not only give the onclick functionality but also give propagation ability
  Event propagation have two context
  1-event bubbling--(false)->buttom-top
  2-event capturing--(true) ->top-buttom

    // attachEvent()
    // jQuery - on

    // type, timestamp, preventDefault
    // target, toElement, srcElement, currentTarget,
    // clientX, clientY, screenX, screenY
    // altkey, ctrlkey, shiftkey, keyCode
    
    ###########################################
    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>htnml Events </title>
</head>

<body style="background-color: #414141; color: aliceblue;">
    <h2>Amazing image</h2>
    <div>
        <ul id="images">
            <li><img width="200px" id="photoshop"
                    src="https://images.pexels.com/photos/3561339/pexels-photo-3561339.jpeg?auto=compress&cs=tinysrgb&w=1600&lazy=load"
                    alt="photoshop"></li>
            <li><img width="200px" id="japan"
                    src="https://images.pexels.com/photos/3532553/pexels-photo-3532553.jpeg?auto=compress&cs=tinysrgb&w=1600&lazy=load"
                    alt=""></li>
            <li><img width="200px" id="river"
                    src="https://images.pexels.com/photos/3532551/pexels-photo-3532551.jpeg?auto=compress&cs=tinysrgb&w=1600&lazy=load"
                    alt=""></li>
            <li><img width="200px" id="owl"
                    src="https://images.pexels.com/photos/3532552/pexels-photo-3532552.jpeg?auto=compress&cs=tinysrgb&w=1600&lazy=load"
                    alt=""></li>
            <li><img width="200px" id="prayer"
                    src="https://images.pexels.com/photos/2522671/pexels-photo-2522671.jpeg?auto=compress&cs=tinysrgb&w=1600&lazy=load"
                    alt=""></li>
            <li><a style="color: aliceblue;" href="https://google.com" id="google">Google</a></li>
        </ul>
    </div>
</body>

<script>
    // document.getElementById('owl').onclick = function(){
    //     alert("owl clicked")
    // }

    // attachEvent()
    // jQuery - on

    // type, timestamp, defaultPrevented
    // target, toElement, srcElement, currentTarget,
    // clientX, clientY, screenX, screenY
    // altkey, ctrlkey, shiftkey, keyCode
    document.getElementById('photoshop').addEventListener('click', (e) => {
        alert(" hello guys");
    }, false);

    document.getElementById('google').addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
    }, false);


    document.querySelector('#images').addEventListener('click', function (e) {
        console.log(e.target.tagName);
        if (e.target.tagName === 'IMG') {
            console.log(e.target.id);
            let removeIt = e.target.parentNode;
            removeIt.remove()
        }
    })
</script>

</html>



7_Async code**********************************************

    ->javscript(Default):- ->Synchronous
                           ->Single Threaded
    
    ->Execution Context:-Execute one line of code at time


Generally in js we write code in following two ways:
    ->Blocking Code: Block the flow of the program->read file sysn
    ->Non-Blocking Code: Does not block execution->read file asysn



8_ 2 projects with async****************************************
  
  PROJECT-1---############################
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Change</title>
</head>
<body>

    <h1>Start button shuld change color in every Second</h1>
    <button id="start">START</button>
    <button id="stop">STOP</button>

    <script>
        const body=document.querySelector('body');
        const h1=document.querySelector('h1');
        // console.log(Math.floor(Math.random()*16));

        const randomColor=()=>{
            const hex='0123456789ABCDEF';
            const x=['ram','shyam','hari'];
            let color="#";
            for(let i=0;i<6;i++){
                color=color+hex[Math.floor(Math.random()*16)];
            }
            return color;
        };
        console.log(randomColor());
        let ref;
        document.querySelector('#start').addEventListener('click',()=>{
            if(!ref){
                ref=setInterval(()=>{
                h1.innerHTML="Color change Event Started";
                body.style.backgroundColor=randomColor();
                console.log("color"+ Date.now());
            },1000);
           }
        });


        document.querySelector('#stop').addEventListener('click',()=>{
            h1.innerHTML=" Color change Event Stopped";
            h1.style.color='red';
            clearInterval(ref);
            ref=null;
            console.log("STOPPED");
        });
    </script>
    
</body>
</html>

PROJECT-2---############################
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Event KeyCodes</title>
    <style>
        table,
        th,
        td {
            border: 1px solid #e7e7e7;
        }

        .project {
            background-color: #1c1c1c;
            color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            height: 100vh;
        }

        .color {
            color: aliceblue;
            display: flex;
            flex-direction: row;
        }
    </style>
</head>

<body>

    <div class="project">
        <div id="insert">
            <div class="key">Press the key and watch magic</div>
        </div>
    </div>
</body>

<script>
    const insert = document.getElementById('insert');
    window.addEventListener('keydown', (e) => {
        insert.innerHTML = `
        <div class="xyz">
            <table>
                <tr>
                    <th>KEY</th>
                    <th>KEYCODE</th>
                    <th>CODE</th>
                </tr>
                <tr>
                    <td>${e.key}</td>
                    <td>${e.keyCode}</td>
                    <td>${e.code}</td>
                </tr>
            </table>

        </div>
        `;
    });
</script>

</html>


9_ API request and v8 engine****************************************

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Api Requets</title>
</head>
<body>
    <h1>HEllo Guys</h1>
</body>
<script>
    const myGitUrl='https://api.github.com/users/sahutirtha143';
    const xhr=new XMLHttpRequest();
    xhr.open('GET',myGitUrl);
    xhr.onreadystatechange=()=>{
        console.log(xhr.readyState );
        if(xhr.readyState===4){
        const dataFromApi=JSON.parse(xhr.responseText);
        console.log(dataFromApi);
        console.log(dataFromApi.followers);
        }

    };
    xhr.send();
  
</script>
</html>


10_Promise in javscript********************************************************************************************

  In JavaScript "PROMISE" is treated as "Object";
  So the PROMISE object represent the eventual completation( or failer) of an Asynchronous operation and its resulting value.


// PROMISE-1:***************************************************************************
// const promiseOne=new Promise((resolve,reject)=>{
//     // USE OF PROMISE
//     //do an asyn task
//     //Database call, cryptograph, network

//     setTimeout(()=>{
//         console.log("Async task is completed");
//         resolve();
//     },1000)
// });

// promiseOne.then(()=>{
// console.log("Promise consumed");
// console.log("***************************************")
// });

// PROMISE-2:******************************************************************************

// new Promise((resolve,reject)=>{
//     setTimeout(()=>{
//         console.log("Asyn task 2");
//         resolve();  
//     },1000)
// }).then(()=>{
//     console.log("Asyn 2 resolved");
// })


// PROMISE-3:******************************************************************************
console.log("***************************************")

// const promiseThree=new Promise((resolve,reject)=>{
//     setTimeout(()=>{
//         resolve({username: "SBS",email:"sbs@gmail.com"});//Every this inside reslove method is object
//     },1000);
// });
// promiseThree.then((user)=>{
//     console.log(user);
//     console.log("***************************************")
// });


// PROMISE-4:*********************************************************************************
const promiseFour=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        let err=false;
        // let err=true;
        if(!err){
            resolve({uname:"SBS",email:"sbs@gmail.com"});
        }else{
            reject("ERROR: Somithing went worng");
        }
    },1000)
});

promiseFour
.then((user)=>{
    console.log(user);
    return user.uname;
})
.then((uname)=>{
    console.log(uname);
})
.catch(()=>{
    console.log("error");
})
.finally(()=>{
    console.log("The promise either resolved or rejectd");
    console.log("***************************************")
})



// PROMISE-5:**************************************************************************

const promiseFive=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        let err=true;
        if(!err){
            resolve({couse:"JavaScript", passwors: "123"});
        }else{
            reject("Error: JS went worng");
        }
    },1000)
})

const consumePromiseFive=async ()=>{
    try {
        const response=await promiseFive;
        console.log(response);
        
        console.log("***************************************")
    } catch (error) {
        console.log(error)
        console.log("***************************************")
   }
}
consumePromiseFive();


// PROMISE-6:********************************************************************************************

// const myGitData=async ()=>{
    //        try {
        //         const response=await fetch('https://api.github.com/users/sahutirtha143');
        //         // console.log(response);
        //         // const data=response.json();
        //         const data=await response.json();
        //         console.log(data);
        //        } catch (error) {
            //         console.log("E :"+error)
            //        }
            // }
            // myGitData();
            
           

// PROMISE-7:********************************************************************************************
fetch('https://api.github.com/users/sahutirtha143')
.then((response)=>{
    // console.log(response);
    // console.log("***************************************");
    return response.json();
})
.then((data)=>{
    console.log(data);
    console.log("***************************************");
})
.catch((error)=>{
    console.log(error);
})




11_Now you know fetch********************************************************************************************

FETCH(): is a method
So the global "fetch()" method starts the process of fetching a resources from the network , returning a promise which is fullfilled once the response is avilable.



12_Object Oriented javascript********************************************************************************************
 
 JAVASCRIPT IS PRIMARELY A "PROTOTYPE BASED LANGUAGE".
TERM: Object Literals
Keywords: Constructor function
          prototypes
          classes
          instance

    //OBJECT LITERALS ####################################################################
   const user={
    uname:"SBS Sahu",
    pass:123,
    getAllData:function(){
        // console.log("Here all data avilable ");
        // console.log(`username is: ${this.uname}`);
        // console.log(this);
    }
   }

//    console.log(user);
//    console.log(user.uname);
// console.log(user.getAllData());
// console.log(this);

//Constructor function #####################################################################
function myUser(uname,upass,islogin){
    this.uname=uname;
    this.upass=upass;
    this.islogin=islogin;

    return this;
}

const u1=new myUser("SBS",123,true);
const u2=new myUser("Sabitri",157,false);
// console.log(u1);
// console.log(u1.uname);

console.log(u2);
console.log(u2.constructor); //.constructor property give data about yourself
console.log(u2.uname);



 13_Magic of prototype********************************************************************************************

  Java Script has prototype behavior
  //"new" keyword and prototype######################################################################

function createUser(username,price){
this.username=username;
this.price=price;
// return this;
}

createUser.prototype.increment=function(){
    this.price++;
}

createUser.prototype.printMe=function(){
    console.log(`The price is ${this.price}`);
}

const baba=new createUser("Biswanath",24);
const bau=createUser("Subhadra",19);
// console.log(bau);

baba.printMe();


/*

Here's what happens behind the scenes when the "new" keyword is used:

A new object is created: The "new" keyword initiates the creation of a new JavaScript object.

A prototype is linked: The newly created object gets linked to the prototype property of the constructor function. This means that it has access to properties and methods defined on the constructor's prototype.

The constructor is called: The constructor function is called with the specified arguments and this is bound to the newly created object. If no explicit return value is specified from the constructor, JavaScript assumes this, the newly created object, to be the intended return value.

The new object is returned: After the constructor function has been called, if it doesn't return a non-primitive value (object, array, function, etc.), the newly created object is returned.

*/


  //PROTOTYPE######################################################################


  let myHero=["thor","spiderman"];


  let heroPower={
    thor:"hamer",
    spiderman:"Spidy",

    getSpidermanPower:function(){
        console.log(`The spidy is the power of ${this.spiderman}`);
    }
  }

//   console.log(myHero);
//   console.log(heroPower);
//   console.log(heroPower.getSpidermanPower());


Object.prototype.kanchan=function(){
    console.log(`Kanchan is present for all the object`);
}

Array.prototype.kasinath=function(){
    console.log("kasinath say hello to every one");
}

// myHero.kanchan();
// heroPower.kanchan();

// myHero.kasinath();
// heroPower.kasinath(); //TypeError: heroPower.kasinath is not a function

// ###########################################

const jaga="jagannath           ";
console.log("Length :"+jaga.length);

String.prototype.trueLength=function(){
    console.log(`${this}`);
    console.log(`True length of the string is: ${this.trim().length}`)
}

jaga.trueLength();
"Anuradha   ".trueLength();



14_Call and this********************************************************************************************
    
function setname(username){
 this.username=username;
}

function setData(username,email,pass){
    setname.call(this,username);
    this.email=email;
    this.pass=pass;
    
}

const user=new setData("Trupti","trupti@gmail.com",23456);
console.log(user);

15_Class contructor********************************************************************************************
    
//Use of "class" keyword########################################
class User{
    constructor(username,email,password){
        this.username=username;
        this.email=email;
        this.password=password;
    }
    passwordEncypt(){
        return `${this.password}xyz`;
    }
    changeUsername(){
        return `${this.username.toUpperCase()}`;
    }
}

const rudra=new User("Tusar Sahu","tusar@gmail.com",123);

// console.log(rudra.passwordEncypt());
// console.log(rudra.changeUsername());

// behind this

function Users(username,email,password){
    this.username=username;
    this.email=email;
    this.password=password;
}

Users.prototype.passwordEncypt=function(){
    return `${this.password}xyz`;
}

Users.prototype. changeUsername=function(){
    return `${this.username.toUpperCase()}`;
}

const adi=new Users("Sai Aditya Sahu","adi@gmail.com",9777);
console.log(adi.passwordEncypt());
console.log(adi.changeUsername());


//USE of "inheritance" ####################################

class User{
    constructor(username){
        this.username=username;
    }
    myUsername(){
        console.log(`username is ${this.username}`);
    }
}

class brother extends User{
    constructor(username,gmail,password){
        super(username);
        this.gmail=gmail;
        this.password=password;
    }

    datials(){
        console.log(`My brother name is ${this.username}, his email is ${this.gmail} and passwod is ${this.password}`);
    }
}

const bro=new brother("Sai Anurag Sahu","anurag@gmail.com","anurag@143");
// bro.datials();

const bros=new User("Sai Anurag Sahu");
// bros.myUsername();

console.log(bro instanceof User);
console.log(bros instanceof User);
console.log(brother instanceof User);
console.log(bros instanceof brother);

//USE of "static" keyword (here not completed) #####################################

class User{
    constructor(username){
        this.username=username;
    }
    myName(){
        console.log(`My name is ${this.username}`);
    }
    static myId(){
        return `123`;
    }
}

const u1=new User("Gagan Sahu");
u1.myName();
// console.log(u1.myId());


class child extends User{
    constructor(username,password){
        super(username);
    this.password=password;
    }
}


const c1=new child("Lipi sahu");
c1.myName();
// c1.myId();




16_Bind********************************************************************************************

<!-- USE OF "bind()" ######################################### -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React-Bild</title>
</head>
<body>
    <button>BUTTON CLICK</button>
</body>

<script>
let btn=document.querySelector('button');
    class react{
        constructor(){
            this.library="React";
            this.server="http://localhost:3305";
            btn.addEventListener('click',this.handleClick.bind(this));
        }
    

        handleClick(){
            console.log("Button Clicked");
            console.log(this);
            console.log(this.server);
            console.log(this.library);
        }
    }

    const app=new react(); 
</script>
</html>


17_ Now you know objects*******************************************************************************

    // const descriptor= Object.getOwnPropertyDescriptor(Math,"PI");
// console.log(descriptor);


const user={
    name:"SBS Sahu",
    pass:"sbs@143"
}

console.log(user);
console.log(Object.getOwnPropertyDescriptor(user,"name"));

Object.defineProperty(user,"name",{
    writable:false,
    enumerable:false
})

console.log(Object.getOwnPropertyDescriptor(user,"name"));


18_Getters and setters*******************************************************************************

//GETTER AND SETTER METHOD

class user{
    constructor(name ,pass){
        this.name=name;
        this.pass=pass;
    }
    get pass(){
        return this._pass;
    }
    set pass(value){
        this._pass=value;
    }
}

const u1=new user("jyoti",523);
console.log(u1.name);
console.log(u1.pass);


19_Lexical scope and closure*******************************************************************************

   LEXICAL manner means  a function present inside another function(parent function)
   where the inner function can acces the local variable values.

   CLOSURE:A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.

   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Closure aur chai</title>
</head>
<body style="background-color: #313131;">
    <button id="orange">Orange</button>
    <button id="green">Green</button>
</body>

    <script>
    // function init() {
    //     let name = "Mozilla"; 
    //     function displayName() {
    //         console.log(name); 
    //     }
    //     displayName();
    // }
    // init();

    // function outer(){
    //     let username = "hitesh"
    //     console.log("OUTER", secret);
    //     function inner(){
    //         let secret = "my123"
    //         console.log("inner", username);
    //     }
    //     function innerTwo(){
    //         console.log("innerTwo", username);
    //         console.log(secret);
    //     }
    //     inner()
    //     innerTwo()

    // }
    // outer()
    // console.log("TOO OUTER", username);


    // function makeFunc() {
    //     const name = "Mozilla";
    //     function displayName() {
    //         console.log(name);
    //     }
    //     return displayName;
    // }

    // const myFunc = makeFunc();
    // myFunc();

    </script>
    <script>
        // document.getElementById("orange").onclick = function(){
        //     document.body.style.backgroundColor = `orange`
        // }
        // document.getElementById("green").onclick = function(){
        //     document.body.style.backgroundColor = `green`
        // }

        function clickHandler(color){
            // document.body.style.backgroundColor = `${color}`

            return function(){
                document.body.style.backgroundColor = `${color}`
            }
        }

        document.getElementById('orange').onclick = clickHandler("orange")
        document.getElementById('green').onclick = clickHandler("green")

    </script>
</html>